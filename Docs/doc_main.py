import sys
import importlib

path_to_exec = "\\".join([i for i in sys.path[0].split("\\")[:-1]]) + "\\"


def map_file_docs(files, file_path):
    for file in files:
        with open(file_path + file + ".py") as f:
            contents = f.read()
            contents = contents.split("\n")

            parse_found = False
            parse_map = [{}, {}, {}]

            mix_found = False
            mix_map = [{}, {}, {}]

            module = importlib.import_module(file)  # Import and run the get maps function, collect the returned maps
            maps = getattr(module, "get_maps")()
            parse_map[0] = maps.get("parse", {})
            mix_map[0] = maps.get("mix", {})

            for ln in contents:  # Process the file as plaintext
                ln = ln.strip()
                if ln:
                    if ln == "# /End":  # Part of the state detection.
                        parse_found = False
                        mix_found = False

                    if parse_found:
                        sub = ln.split("::")
                        if len(sub) == 2:
                            if sub[0][2:] in parse_map[0].keys():  # Save into the descriptors or extras dictionary
                                parse_map[1][sub[0][2:]] = "::".join(sub[1:]).lstrip()
                                last_name = [1, sub[0][2:]]
                            else:
                                parse_map[2][sub[0][2:]] = "::".join(sub[1:]).lstrip()
                                last_name = [2, sub[0][2:]]
                        else:  # Append to last stored entry, as this is likely a second line from the previous comment
                            if sub:
                                parse_map[last_name[0]][last_name[1]] += "".join(sub)[2:]

                    if mix_found:  # Mirror the parse code but aimed at the mix map
                        sub = ln.split("::")
                        if len(sub) == 2:
                            if sub[0][2:] in mix_map[0].keys():
                                mix_map[1][sub[0][2:]] = "::".join(sub[1:]).lstrip()
                                last_name = [1, sub[0][2:]]
                            else:
                                mix_map[2][sub[0][2:]] = "::".join(sub[1:]).lstrip()
                                last_name = [2, sub[0][2:]]
                        else:
                            if sub:
                                mix_map[last_name[0]][last_name[1]] += "".join(sub)[2:]

                    if ln == "# /Parse map binds:":  # Enable the harvesting module. This siphons any blocks of comment marked with the keys
                        parse_found = True
                        mix_found = False
                    if ln == "# /Mix map binds:":
                        mix_found = True
                        parse_found = False

            header = f"Autogenerated documentation for {file}\n\n"
            trailer = f"Regenerate this file by running Docs\\doc_main.py"

            # Parse map processing
            parse_output = []
            for name, item in parse_map[0].items():  # Zip and prune data
                listing = [name, item[:2], parse_map[1].get(name)]
                parse_output.append(listing)
            parse_formatted = "Parse map listings" + "\n"
            for item in parse_output:
                item_block = f"    {item[0]}: {item[2] if item[2] is not None else 'No description was provided'}\n" + \
                             f"         {item[1][0]} stack values, {item[1][1]} programmed values.\n" + \
                             f"    ----\n"
                parse_formatted += item_block

            if parse_map[2]:  # Prep extra listings
                parse_formatted += "  ------\n" + \
                                   "  Extra listings:\n"
                for name, item in parse_map[2].items():
                    item_block = f"    {name}: {item}\n" + \
                                 f"    ----\n"
                    parse_formatted += item_block

            parse_formatted += "--------\n\n"

            # Mix map processing
            mix_output = []
            for name, item in mix_map[0].items():  # Mirror parse processing
                listing = [name, item, mix_map[1].get(name)]
                mix_output.append(listing)
            mix_formatted = "Mix map listings" + "\n"
            for item in mix_output:
                item_block = f"    {item[0]}: {item[2] if item[2] is not None else 'No description was provided'}\n" + \
                             f"         {item[1]}\n" + \
                             f"    ----\n"
                mix_formatted += item_block

            if mix_map[2]:
                mix_formatted += "  ------\n" + \
                                 "  Extra listings:\n"
                for name, item in mix_map[2].items():
                    item_block = f"    {name}: {item}\n" + \
                                 f"    ----\n"
                    mix_formatted += item_block

            mix_formatted += "--------\n\n"

            with open(file_path + file + ".txt", "w") as output:
                output.write(header)
                output.write(parse_formatted)
                output.write(mix_formatted)
                output.write(trailer)


if __name__ == "__main__":
    # Create docs for the mapping files
    files = ["default_maps"]
    map_file_docs(files, path_to_exec)

# todo a listing of different mix modes, scraped from the handling file
