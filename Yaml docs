Todo:
	Add shader table, support either name or direct strings

Yaml structure:
-------x--------

Scene table:
	Scene:
		- Self attributes
		- children scenes
		- children objects

	Objects:
		- Attributes

Setup info:
	- Framerate

shared_data:
  Color table:
    color name:
        - r
        - g
        - b


------x-x------

Objects:
	Object attributes and their defaults should be detailed in the attributes method self.list_attributes()
    Objects must create and destroy any gl elements
    Objects must set the gl state in vertex arrays, textures and shaders.
    Objects must not communicate directly with others
    Objects must not modify the attribute pool for any purpose
    Objects must respect all inheritable attributes

    The object class:
        The object base class provides a gl.Vao and gl.Vbo object. These should be filled with appropriate data and bound to each other before drawing
        

	Common object attributes, can expect to be present:
		elapsed_frames: int. Frames since the start of clip
		shader: gl.Shader. Handle for shader, use to enable and pass render arguments
		in_matrix: gl.Mat4. This matrix is used by parents to modify the scale of the object. Multiply this into the local transform matrix
		screen_x: int. Size of screen in pixels
		screen_y: int. Size of screen in pixels
		alpha_in: float. Parent control of the child alpha. Multiply with object alpha before render


	Useful object attributes, not all must be expressed:
		visible: boolean, assume true. Show if true
		pos_x: float, assume 0. Specifies offset of the object center relative to its origin
		pos_y: float, assume 0. Specifies offset of the object center relative to its origin
		size_x: float, assume 0.5. Specifies size of the object, normalised to -1:1
		size_y: float, assume 0.5. Specifies size of the object, normalised to -1:1
		psize_x: float, assume 40. Specifies the size of the object in pixels. Prefer size_x if available
		psize_y: float, assume 40. Specifies the size of the object in pixels. Prefer size_y if available
		color: fv3, assume 1, 0, 1. Color of the object, bounded to 0:1
		alpha: float, assume 1. Alpha of the object, bounded to 0:1

	Inheritable attributes:
		clip_bounds: fv4, assume -1, -1, 1, 1. Provides bounding box of the parent. Clip self against it             # Achieved by setting gl_ClipDistance in the Vshader
	
	
Scenes:
	Scenes must completely encapsulate childen, such that transforms or modifications to the scene affect the children equally
	Scenes must apply clipping and alpha inheritance from any parents

	Useful scene attributes, not all must be expressed:
		pos_x: float, assume 0. Specifies offset of the scene center relative to its origin
		pos_y: float, assume 0. Specifies offset of the scene center relative to its origin
		size_x: float, assume 0.5. Specifies size of the scene, normalised to -1:1
		size_y: float, assume 0.5. Specifies size of the scene, normalised to -1:1
		back_color: fv3, assume 1, 0, 1. background color of the scene, bounded to 0:1
	Inheritable attributes:
		clip_bounds: fv4, assume -1, -1, 1, 1. Provides bounding box of the parent. Clip self against it and use to determine children clip
		visible: boolean, assume true. Show if true
		back_alpha: float, assume 0. Alpha of the scene and all children                           # This must be applied to children

-------x-x-------

Attribute handlers: v2

	At storage, the attributes are stored as a list, starting with the command group, followed by attributes it will apply to
	example_attr:
		- - frame
		  - add
		  - multiply
		  - floor
		- 30
		- 0.3
		- 0.7

	where example_attr holds its name, and 30 / 0.3 are example values. The first list element is the command group.
	The command group is a list of different operators, arranged in postfix notation.
		The particular group shown collects the frame number with "frame", then adds 30 units and multiplies by 0.3, then floor dividing by 0.7
	The parser processes the group for all input names and provides an output dictionary containing the names and their evaluated values.

	When processing, if any command word in a name is unknown or the name is not formatted as expected, stop and copy the input name into the output

	After parsing, the output attributes are provided to the mixer.
	The mixer makes use of an internal table to combine two sets of attributes with a default dictionary
	One set of attributes is the output of the parser, while the other set is inherited from the parent
	Only names seen in the default dictionary need to be passed forward.

	The concept of mixing allows some attributes like alpha to be mixed via multiplication, while attributes like position are mixed via addition.
	Mix types are:
		Add       -> Add both inputs
		Multiply  -> Multiply both inputs
		Inherit   -> Use the parent set
		Ignore    -> Use the child set

	Attributes default to inherit, and if a set is missing the required name, the default value is used instead.

	Command options:
	#   name -> num of operands, num of data values, description

		const -> 0, 1, return constant value
		multiply -> 1, 1, multiply previous operand with datapoint
		frame -> 0, 0, return current frame number
		add -> 1, 1, add previous operand to datapoint
		sine -> 1, 0, return sine of previous operand
		fsine -> 0, 2, return sine of frame number, where c1 is multiplied with frame number and c2 is multiplied with the result
		floor -> 1, 1, return the floor division of the previous operand with datapoint
		lookup -> 3, 0, lookup the provided name in the shared data section, using section and then name.
						Use the third input to provide a default value

	If the first command of the group is a number, it signifies that the group should produce a list output.
	Repeat the commands as specified. Each time the commands are finished, add the result to an output list.
	Each rep will be provided with new constants that may differ between run.
	Eg:
	Attr:
	  - - 2
	    - const
	    - multiply
	  - 5
	  - 0.4
	  - 20
	  - 0.3

	will provide the output [2, 6]

	If a command would yield a vector of the same degree as the vector number, only yield the relevant index of that vector
